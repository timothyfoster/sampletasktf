/** This class was generated by GenTest@Mobacar */
package com.arvoia.sampletask.controller;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.arvoia.sampletask.model.AvailResponse;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.client.RestTemplate;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = AvailRestController.class)
public class AvailRestControllerTest {

  @Autowired
  private AvailRestController underTest;

  @Value("${vendor.url}")
  private String vendorUrl;

  @MockBean
  private RestTemplate restTemplate;

  private MockMvc mockMvc;

  @Before
  public void setupTest() {
    // prepare test
    mockMvc = MockMvcBuilders.standaloneSetup(underTest).build();
    ResponseEntity<String> sampleResponse = new ResponseEntity<>(
        "{\"error\": {\"code\": 600, \"description\": \"system maintenance\"}}", HttpStatus.OK);
    doReturn(sampleResponse).when(restTemplate)
        .getForEntity(anyString(), eq(String.class));
  }

  @Test
  public void testGetAvailabilities_MVC_get() throws Exception {
    // given
    // when
    MvcResult actual = mockMvc.perform(get("/avail")
        .accept("application/json;charset=UTF-8"))
        .andExpect(status().isOk())
        .andReturn();
    // then
    String contentAsString = actual.getResponse().getContentAsString();
    assertNotNull(contentAsString);
    verify(restTemplate).getForEntity(vendorUrl, String.class);
  }

  @Test
  public void testGetAvailabilities() throws Exception {
    // given
    // when
    AvailResponse actual = underTest.getAvailabilities();
    // then
    assertNotNull(actual);
    verify(restTemplate).getForEntity(vendorUrl, String.class);
  }

}
